-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_LZW_dataflow_in_loop_VITIS_LOOP_346_2 is
port (
    m_axi_aximm0_AWVALID : OUT STD_LOGIC;
    m_axi_aximm0_AWREADY : IN STD_LOGIC;
    m_axi_aximm0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_aximm0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_aximm0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_WVALID : OUT STD_LOGIC;
    m_axi_aximm0_WREADY : IN STD_LOGIC;
    m_axi_aximm0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_aximm0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_aximm0_WLAST : OUT STD_LOGIC;
    m_axi_aximm0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_ARVALID : OUT STD_LOGIC;
    m_axi_aximm0_ARREADY : IN STD_LOGIC;
    m_axi_aximm0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_aximm0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_aximm0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_RVALID : IN STD_LOGIC;
    m_axi_aximm0_RREADY : OUT STD_LOGIC;
    m_axi_aximm0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_aximm0_RLAST : IN STD_LOGIC;
    m_axi_aximm0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm0_BVALID : IN STD_LOGIC;
    m_axi_aximm0_BREADY : OUT STD_LOGIC;
    m_axi_aximm0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    send_data : IN STD_LOGIC_VECTOR (63 downto 0);
    i_1 : IN STD_LOGIC_VECTOR (6 downto 0);
    output_length : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_in_length_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    inStream_in_length_empty_n : IN STD_LOGIC;
    inStream_in_length_read : OUT STD_LOGIC;
    input_offset_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
    input_offset_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_offset_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
    output_offset_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_r_ap_vld : IN STD_LOGIC;
    send_data_ap_vld : IN STD_LOGIC;
    i_1_ap_vld : IN STD_LOGIC;
    output_length_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    input_offset_constprop_i_ap_vld : IN STD_LOGIC;
    input_offset_constprop_o_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    output_offset_constprop_i_ap_vld : IN STD_LOGIC;
    output_offset_constprop_o_ap_vld : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of krnl_LZW_dataflow_in_loop_VITIS_LOOP_346_2 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_start_out : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_start_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_input_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_input_out_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_send_data_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_send_data_out_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_i_1_out_din : STD_LOGIC_VECTOR (6 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_i_1_out_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_output_length_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_output_length_out_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_r_read : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_read : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_read : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_read : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_out_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_out_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_out_din : STD_LOGIC_VECTOR (6 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_out_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_out_write : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry_proc_proc_U0_empty : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry_proc_proc_U0_empty_ap_vld : STD_LOGIC;
    signal Block_entry_proc_proc_U0_inStream_in_length_read : STD_LOGIC;
    signal read_input_U0_ap_start : STD_LOGIC;
    signal read_input_U0_ap_done : STD_LOGIC;
    signal read_input_U0_ap_continue : STD_LOGIC;
    signal read_input_U0_ap_idle : STD_LOGIC;
    signal read_input_U0_ap_ready : STD_LOGIC;
    signal read_input_U0_start_out : STD_LOGIC;
    signal read_input_U0_start_write : STD_LOGIC;
    signal read_input_U0_m_axi_aximm0_AWVALID : STD_LOGIC;
    signal read_input_U0_m_axi_aximm0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input_U0_m_axi_aximm0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_aximm0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_U0_m_axi_aximm0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_aximm0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_aximm0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_aximm0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_aximm0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_aximm0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_aximm0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_aximm0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_aximm0_WVALID : STD_LOGIC;
    signal read_input_U0_m_axi_aximm0_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input_U0_m_axi_aximm0_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_m_axi_aximm0_WLAST : STD_LOGIC;
    signal read_input_U0_m_axi_aximm0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_aximm0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_aximm0_ARVALID : STD_LOGIC;
    signal read_input_U0_m_axi_aximm0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input_U0_m_axi_aximm0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_aximm0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_U0_m_axi_aximm0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_aximm0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_aximm0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_aximm0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_aximm0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_aximm0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_aximm0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_aximm0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_aximm0_RREADY : STD_LOGIC;
    signal read_input_U0_m_axi_aximm0_BREADY : STD_LOGIC;
    signal read_input_U0_input_r_read : STD_LOGIC;
    signal read_input_U0_input_offset_constprop_o : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_U0_input_offset_constprop_o_ap_vld : STD_LOGIC;
    signal read_input_U0_inStream_in_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inStream_in_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal compute_LZW_U0_ap_start : STD_LOGIC;
    signal compute_LZW_U0_ap_done : STD_LOGIC;
    signal compute_LZW_U0_ap_continue : STD_LOGIC;
    signal compute_LZW_U0_ap_idle : STD_LOGIC;
    signal compute_LZW_U0_ap_ready : STD_LOGIC;
    signal compute_LZW_U0_inStream_in_read : STD_LOGIC;
    signal compute_LZW_U0_outStream_code_flg_din : STD_LOGIC_VECTOR (7 downto 0);
    signal compute_LZW_U0_outStream_code_flg_write : STD_LOGIC;
    signal compute_LZW_U0_outStream_code_din : STD_LOGIC_VECTOR (12 downto 0);
    signal compute_LZW_U0_outStream_code_write : STD_LOGIC;
    signal write_result_U0_ap_start : STD_LOGIC;
    signal write_result_U0_ap_done : STD_LOGIC;
    signal write_result_U0_ap_continue : STD_LOGIC;
    signal write_result_U0_ap_idle : STD_LOGIC;
    signal write_result_U0_ap_ready : STD_LOGIC;
    signal write_result_U0_m_axi_aximm0_AWVALID : STD_LOGIC;
    signal write_result_U0_m_axi_aximm0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_result_U0_m_axi_aximm0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_aximm0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_result_U0_m_axi_aximm0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_aximm0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_aximm0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_aximm0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_aximm0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_aximm0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_aximm0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_aximm0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_aximm0_WVALID : STD_LOGIC;
    signal write_result_U0_m_axi_aximm0_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal write_result_U0_m_axi_aximm0_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal write_result_U0_m_axi_aximm0_WLAST : STD_LOGIC;
    signal write_result_U0_m_axi_aximm0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_aximm0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_aximm0_ARVALID : STD_LOGIC;
    signal write_result_U0_m_axi_aximm0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_result_U0_m_axi_aximm0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_aximm0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_result_U0_m_axi_aximm0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_aximm0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_aximm0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_aximm0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_aximm0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_aximm0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_aximm0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_aximm0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_aximm0_RREADY : STD_LOGIC;
    signal write_result_U0_m_axi_aximm0_BREADY : STD_LOGIC;
    signal write_result_U0_send_data_read : STD_LOGIC;
    signal write_result_U0_i_1_read : STD_LOGIC;
    signal write_result_U0_output_length_read : STD_LOGIC;
    signal write_result_U0_outStream_code_flg_read : STD_LOGIC;
    signal write_result_U0_outStream_code_read : STD_LOGIC;
    signal write_result_U0_output_offset_constprop_o : STD_LOGIC_VECTOR (31 downto 0);
    signal write_result_U0_output_offset_constprop_o_ap_vld : STD_LOGIC;
    signal input_c1_full_n : STD_LOGIC;
    signal input_c1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal input_c1_empty_n : STD_LOGIC;
    signal send_data_c2_full_n : STD_LOGIC;
    signal send_data_c2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal send_data_c2_empty_n : STD_LOGIC;
    signal i_1_c3_full_n : STD_LOGIC;
    signal i_1_c3_dout : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_c3_empty_n : STD_LOGIC;
    signal output_length_c4_full_n : STD_LOGIC;
    signal output_length_c4_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_length_c4_empty_n : STD_LOGIC;
    signal input_c_full_n : STD_LOGIC;
    signal input_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal input_c_empty_n : STD_LOGIC;
    signal send_data_c_full_n : STD_LOGIC;
    signal send_data_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal send_data_c_empty_n : STD_LOGIC;
    signal i_1_c_full_n : STD_LOGIC;
    signal i_1_c_dout : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_c_empty_n : STD_LOGIC;
    signal output_length_c_full_n : STD_LOGIC;
    signal output_length_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_length_c_empty_n : STD_LOGIC;
    signal inStream_in_full_n : STD_LOGIC;
    signal inStream_in_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_in_empty_n : STD_LOGIC;
    signal outStream_code_flg_full_n : STD_LOGIC;
    signal outStream_code_flg_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_code_flg_empty_n : STD_LOGIC;
    signal outStream_code_full_n : STD_LOGIC;
    signal outStream_code_dout : STD_LOGIC_VECTOR (12 downto 0);
    signal outStream_code_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry_proc_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry_proc_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_input_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_input_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_write_result_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_write_result_U0_ap_ready : STD_LOGIC;
    signal start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_full_n : STD_LOGIC;
    signal start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_empty_n : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_start_write : STD_LOGIC;
    signal Block_entry_proc_proc_U0_start_full_n : STD_LOGIC;
    signal Block_entry_proc_proc_U0_start_write : STD_LOGIC;
    signal start_for_compute_LZW_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_LZW_U0_full_n : STD_LOGIC;
    signal start_for_compute_LZW_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_LZW_U0_empty_n : STD_LOGIC;
    signal compute_LZW_U0_start_full_n : STD_LOGIC;
    signal compute_LZW_U0_start_write : STD_LOGIC;
    signal write_result_U0_start_full_n : STD_LOGIC;
    signal write_result_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_LZW_dataflow_in_loop_VITIS_LOOP_346_2_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        send_data : IN STD_LOGIC_VECTOR (63 downto 0);
        i_1 : IN STD_LOGIC_VECTOR (6 downto 0);
        output_length : IN STD_LOGIC_VECTOR (63 downto 0);
        input_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_out_full_n : IN STD_LOGIC;
        input_out_write : OUT STD_LOGIC;
        send_data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        send_data_out_full_n : IN STD_LOGIC;
        send_data_out_write : OUT STD_LOGIC;
        i_1_out_din : OUT STD_LOGIC_VECTOR (6 downto 0);
        i_1_out_full_n : IN STD_LOGIC;
        i_1_out_write : OUT STD_LOGIC;
        output_length_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_length_out_full_n : IN STD_LOGIC;
        output_length_out_write : OUT STD_LOGIC );
    end component;


    component krnl_LZW_dataflow_in_loop_VITIS_LOOP_346_2_entry6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        send_data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        send_data_empty_n : IN STD_LOGIC;
        send_data_read : OUT STD_LOGIC;
        i_1_dout : IN STD_LOGIC_VECTOR (6 downto 0);
        i_1_empty_n : IN STD_LOGIC;
        i_1_read : OUT STD_LOGIC;
        output_length_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_length_empty_n : IN STD_LOGIC;
        output_length_read : OUT STD_LOGIC;
        input_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_out_full_n : IN STD_LOGIC;
        input_out_write : OUT STD_LOGIC;
        send_data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        send_data_out_full_n : IN STD_LOGIC;
        send_data_out_write : OUT STD_LOGIC;
        i_1_out_din : OUT STD_LOGIC_VECTOR (6 downto 0);
        i_1_out_full_n : IN STD_LOGIC;
        i_1_out_write : OUT STD_LOGIC;
        output_length_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_length_out_full_n : IN STD_LOGIC;
        output_length_out_write : OUT STD_LOGIC );
    end component;


    component krnl_LZW_Block_entry_proc_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty : OUT STD_LOGIC_VECTOR (15 downto 0);
        empty_ap_vld : OUT STD_LOGIC;
        inStream_in_length_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        inStream_in_length_empty_n : IN STD_LOGIC;
        inStream_in_length_read : OUT STD_LOGIC );
    end component;


    component krnl_LZW_read_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_aximm0_AWVALID : OUT STD_LOGIC;
        m_axi_aximm0_AWREADY : IN STD_LOGIC;
        m_axi_aximm0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_WVALID : OUT STD_LOGIC;
        m_axi_aximm0_WREADY : IN STD_LOGIC;
        m_axi_aximm0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_aximm0_WLAST : OUT STD_LOGIC;
        m_axi_aximm0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_ARVALID : OUT STD_LOGIC;
        m_axi_aximm0_ARREADY : IN STD_LOGIC;
        m_axi_aximm0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_RVALID : IN STD_LOGIC;
        m_axi_aximm0_RREADY : OUT STD_LOGIC;
        m_axi_aximm0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_RLAST : IN STD_LOGIC;
        m_axi_aximm0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_BVALID : IN STD_LOGIC;
        m_axi_aximm0_BREADY : OUT STD_LOGIC;
        m_axi_aximm0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (15 downto 0);
        input_offset_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
        input_offset_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_offset_constprop_o_ap_vld : OUT STD_LOGIC;
        inStream_in_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inStream_in_full_n : IN STD_LOGIC;
        inStream_in_write : OUT STD_LOGIC );
    end component;


    component krnl_LZW_compute_LZW IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (15 downto 0);
        inStream_in_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inStream_in_empty_n : IN STD_LOGIC;
        inStream_in_read : OUT STD_LOGIC;
        outStream_code_flg_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream_code_flg_full_n : IN STD_LOGIC;
        outStream_code_flg_write : OUT STD_LOGIC;
        outStream_code_din : OUT STD_LOGIC_VECTOR (12 downto 0);
        outStream_code_full_n : IN STD_LOGIC;
        outStream_code_write : OUT STD_LOGIC );
    end component;


    component krnl_LZW_write_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_aximm0_AWVALID : OUT STD_LOGIC;
        m_axi_aximm0_AWREADY : IN STD_LOGIC;
        m_axi_aximm0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_WVALID : OUT STD_LOGIC;
        m_axi_aximm0_WREADY : IN STD_LOGIC;
        m_axi_aximm0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_aximm0_WLAST : OUT STD_LOGIC;
        m_axi_aximm0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_ARVALID : OUT STD_LOGIC;
        m_axi_aximm0_ARREADY : IN STD_LOGIC;
        m_axi_aximm0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_RVALID : IN STD_LOGIC;
        m_axi_aximm0_RREADY : OUT STD_LOGIC;
        m_axi_aximm0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm0_RLAST : IN STD_LOGIC;
        m_axi_aximm0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_BVALID : IN STD_LOGIC;
        m_axi_aximm0_BREADY : OUT STD_LOGIC;
        m_axi_aximm0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        empty : IN STD_LOGIC_VECTOR (15 downto 0);
        send_data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        send_data_empty_n : IN STD_LOGIC;
        send_data_read : OUT STD_LOGIC;
        i_1_dout : IN STD_LOGIC_VECTOR (6 downto 0);
        i_1_empty_n : IN STD_LOGIC;
        i_1_read : OUT STD_LOGIC;
        output_length_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_length_empty_n : IN STD_LOGIC;
        output_length_read : OUT STD_LOGIC;
        outStream_code_flg_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        outStream_code_flg_empty_n : IN STD_LOGIC;
        outStream_code_flg_read : OUT STD_LOGIC;
        outStream_code_dout : IN STD_LOGIC_VECTOR (12 downto 0);
        outStream_code_empty_n : IN STD_LOGIC;
        outStream_code_read : OUT STD_LOGIC;
        output_offset_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
        output_offset_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset_constprop_o_ap_vld : OUT STD_LOGIC );
    end component;


    component krnl_LZW_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_fifo_w7_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (6 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_fifo_w7_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (6 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_fifo_w8_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_fifo_w13_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (12 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_LZW_start_for_compute_LZW_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0 : component krnl_LZW_dataflow_in_loop_VITIS_LOOP_346_2_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_start,
        start_full_n => start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_full_n,
        ap_done => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_done,
        ap_continue => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_continue,
        ap_idle => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_idle,
        ap_ready => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready,
        start_out => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_start_out,
        start_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_start_write,
        input_r => input_r,
        send_data => send_data,
        i_1 => i_1,
        output_length => output_length,
        input_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_input_out_din,
        input_out_full_n => input_c1_full_n,
        input_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_input_out_write,
        send_data_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_send_data_out_din,
        send_data_out_full_n => send_data_c2_full_n,
        send_data_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_send_data_out_write,
        i_1_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_i_1_out_din,
        i_1_out_full_n => i_1_c3_full_n,
        i_1_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_i_1_out_write,
        output_length_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_output_length_out_din,
        output_length_out_full_n => output_length_c4_full_n,
        output_length_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_output_length_out_write);

    dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0 : component krnl_LZW_dataflow_in_loop_VITIS_LOOP_346_2_entry6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_start,
        ap_done => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_done,
        ap_continue => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_continue,
        ap_idle => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_idle,
        ap_ready => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_ready,
        input_r_dout => input_c1_dout,
        input_r_empty_n => input_c1_empty_n,
        input_r_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_r_read,
        send_data_dout => send_data_c2_dout,
        send_data_empty_n => send_data_c2_empty_n,
        send_data_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_read,
        i_1_dout => i_1_c3_dout,
        i_1_empty_n => i_1_c3_empty_n,
        i_1_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_read,
        output_length_dout => output_length_c4_dout,
        output_length_empty_n => output_length_c4_empty_n,
        output_length_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_read,
        input_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_out_din,
        input_out_full_n => input_c_full_n,
        input_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_out_write,
        send_data_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_out_din,
        send_data_out_full_n => send_data_c_full_n,
        send_data_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_out_write,
        i_1_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_out_din,
        i_1_out_full_n => i_1_c_full_n,
        i_1_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_out_write,
        output_length_out_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_out_din,
        output_length_out_full_n => output_length_c_full_n,
        output_length_out_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_out_write);

    Block_entry_proc_proc_U0 : component krnl_LZW_Block_entry_proc_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry_proc_proc_U0_ap_start,
        ap_done => Block_entry_proc_proc_U0_ap_done,
        ap_continue => Block_entry_proc_proc_U0_ap_continue,
        ap_idle => Block_entry_proc_proc_U0_ap_idle,
        ap_ready => Block_entry_proc_proc_U0_ap_ready,
        empty => Block_entry_proc_proc_U0_empty,
        empty_ap_vld => Block_entry_proc_proc_U0_empty_ap_vld,
        inStream_in_length_dout => inStream_in_length_dout,
        inStream_in_length_empty_n => inStream_in_length_empty_n,
        inStream_in_length_read => Block_entry_proc_proc_U0_inStream_in_length_read);

    read_input_U0 : component krnl_LZW_read_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_input_U0_ap_start,
        start_full_n => start_for_compute_LZW_U0_full_n,
        ap_done => read_input_U0_ap_done,
        ap_continue => read_input_U0_ap_continue,
        ap_idle => read_input_U0_ap_idle,
        ap_ready => read_input_U0_ap_ready,
        start_out => read_input_U0_start_out,
        start_write => read_input_U0_start_write,
        m_axi_aximm0_AWVALID => read_input_U0_m_axi_aximm0_AWVALID,
        m_axi_aximm0_AWREADY => ap_const_logic_0,
        m_axi_aximm0_AWADDR => read_input_U0_m_axi_aximm0_AWADDR,
        m_axi_aximm0_AWID => read_input_U0_m_axi_aximm0_AWID,
        m_axi_aximm0_AWLEN => read_input_U0_m_axi_aximm0_AWLEN,
        m_axi_aximm0_AWSIZE => read_input_U0_m_axi_aximm0_AWSIZE,
        m_axi_aximm0_AWBURST => read_input_U0_m_axi_aximm0_AWBURST,
        m_axi_aximm0_AWLOCK => read_input_U0_m_axi_aximm0_AWLOCK,
        m_axi_aximm0_AWCACHE => read_input_U0_m_axi_aximm0_AWCACHE,
        m_axi_aximm0_AWPROT => read_input_U0_m_axi_aximm0_AWPROT,
        m_axi_aximm0_AWQOS => read_input_U0_m_axi_aximm0_AWQOS,
        m_axi_aximm0_AWREGION => read_input_U0_m_axi_aximm0_AWREGION,
        m_axi_aximm0_AWUSER => read_input_U0_m_axi_aximm0_AWUSER,
        m_axi_aximm0_WVALID => read_input_U0_m_axi_aximm0_WVALID,
        m_axi_aximm0_WREADY => ap_const_logic_0,
        m_axi_aximm0_WDATA => read_input_U0_m_axi_aximm0_WDATA,
        m_axi_aximm0_WSTRB => read_input_U0_m_axi_aximm0_WSTRB,
        m_axi_aximm0_WLAST => read_input_U0_m_axi_aximm0_WLAST,
        m_axi_aximm0_WID => read_input_U0_m_axi_aximm0_WID,
        m_axi_aximm0_WUSER => read_input_U0_m_axi_aximm0_WUSER,
        m_axi_aximm0_ARVALID => read_input_U0_m_axi_aximm0_ARVALID,
        m_axi_aximm0_ARREADY => m_axi_aximm0_ARREADY,
        m_axi_aximm0_ARADDR => read_input_U0_m_axi_aximm0_ARADDR,
        m_axi_aximm0_ARID => read_input_U0_m_axi_aximm0_ARID,
        m_axi_aximm0_ARLEN => read_input_U0_m_axi_aximm0_ARLEN,
        m_axi_aximm0_ARSIZE => read_input_U0_m_axi_aximm0_ARSIZE,
        m_axi_aximm0_ARBURST => read_input_U0_m_axi_aximm0_ARBURST,
        m_axi_aximm0_ARLOCK => read_input_U0_m_axi_aximm0_ARLOCK,
        m_axi_aximm0_ARCACHE => read_input_U0_m_axi_aximm0_ARCACHE,
        m_axi_aximm0_ARPROT => read_input_U0_m_axi_aximm0_ARPROT,
        m_axi_aximm0_ARQOS => read_input_U0_m_axi_aximm0_ARQOS,
        m_axi_aximm0_ARREGION => read_input_U0_m_axi_aximm0_ARREGION,
        m_axi_aximm0_ARUSER => read_input_U0_m_axi_aximm0_ARUSER,
        m_axi_aximm0_RVALID => m_axi_aximm0_RVALID,
        m_axi_aximm0_RREADY => read_input_U0_m_axi_aximm0_RREADY,
        m_axi_aximm0_RDATA => m_axi_aximm0_RDATA,
        m_axi_aximm0_RLAST => m_axi_aximm0_RLAST,
        m_axi_aximm0_RID => m_axi_aximm0_RID,
        m_axi_aximm0_RUSER => m_axi_aximm0_RUSER,
        m_axi_aximm0_RRESP => m_axi_aximm0_RRESP,
        m_axi_aximm0_BVALID => ap_const_logic_0,
        m_axi_aximm0_BREADY => read_input_U0_m_axi_aximm0_BREADY,
        m_axi_aximm0_BRESP => ap_const_lv2_0,
        m_axi_aximm0_BID => ap_const_lv1_0,
        m_axi_aximm0_BUSER => ap_const_lv1_0,
        input_r_dout => input_c_dout,
        input_r_empty_n => input_c_empty_n,
        input_r_read => read_input_U0_input_r_read,
        empty => ap_const_lv16_0,
        input_offset_constprop_i => input_offset_constprop_i,
        input_offset_constprop_o => read_input_U0_input_offset_constprop_o,
        input_offset_constprop_o_ap_vld => read_input_U0_input_offset_constprop_o_ap_vld,
        inStream_in_din => read_input_U0_inStream_in_din,
        inStream_in_full_n => inStream_in_full_n,
        inStream_in_write => read_input_U0_inStream_in_write);

    compute_LZW_U0 : component krnl_LZW_compute_LZW
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compute_LZW_U0_ap_start,
        ap_done => compute_LZW_U0_ap_done,
        ap_continue => compute_LZW_U0_ap_continue,
        ap_idle => compute_LZW_U0_ap_idle,
        ap_ready => compute_LZW_U0_ap_ready,
        empty => ap_const_lv16_0,
        inStream_in_dout => inStream_in_dout,
        inStream_in_empty_n => inStream_in_empty_n,
        inStream_in_read => compute_LZW_U0_inStream_in_read,
        outStream_code_flg_din => compute_LZW_U0_outStream_code_flg_din,
        outStream_code_flg_full_n => outStream_code_flg_full_n,
        outStream_code_flg_write => compute_LZW_U0_outStream_code_flg_write,
        outStream_code_din => compute_LZW_U0_outStream_code_din,
        outStream_code_full_n => outStream_code_full_n,
        outStream_code_write => compute_LZW_U0_outStream_code_write);

    write_result_U0 : component krnl_LZW_write_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_result_U0_ap_start,
        ap_done => write_result_U0_ap_done,
        ap_continue => write_result_U0_ap_continue,
        ap_idle => write_result_U0_ap_idle,
        ap_ready => write_result_U0_ap_ready,
        m_axi_aximm0_AWVALID => write_result_U0_m_axi_aximm0_AWVALID,
        m_axi_aximm0_AWREADY => m_axi_aximm0_AWREADY,
        m_axi_aximm0_AWADDR => write_result_U0_m_axi_aximm0_AWADDR,
        m_axi_aximm0_AWID => write_result_U0_m_axi_aximm0_AWID,
        m_axi_aximm0_AWLEN => write_result_U0_m_axi_aximm0_AWLEN,
        m_axi_aximm0_AWSIZE => write_result_U0_m_axi_aximm0_AWSIZE,
        m_axi_aximm0_AWBURST => write_result_U0_m_axi_aximm0_AWBURST,
        m_axi_aximm0_AWLOCK => write_result_U0_m_axi_aximm0_AWLOCK,
        m_axi_aximm0_AWCACHE => write_result_U0_m_axi_aximm0_AWCACHE,
        m_axi_aximm0_AWPROT => write_result_U0_m_axi_aximm0_AWPROT,
        m_axi_aximm0_AWQOS => write_result_U0_m_axi_aximm0_AWQOS,
        m_axi_aximm0_AWREGION => write_result_U0_m_axi_aximm0_AWREGION,
        m_axi_aximm0_AWUSER => write_result_U0_m_axi_aximm0_AWUSER,
        m_axi_aximm0_WVALID => write_result_U0_m_axi_aximm0_WVALID,
        m_axi_aximm0_WREADY => m_axi_aximm0_WREADY,
        m_axi_aximm0_WDATA => write_result_U0_m_axi_aximm0_WDATA,
        m_axi_aximm0_WSTRB => write_result_U0_m_axi_aximm0_WSTRB,
        m_axi_aximm0_WLAST => write_result_U0_m_axi_aximm0_WLAST,
        m_axi_aximm0_WID => write_result_U0_m_axi_aximm0_WID,
        m_axi_aximm0_WUSER => write_result_U0_m_axi_aximm0_WUSER,
        m_axi_aximm0_ARVALID => write_result_U0_m_axi_aximm0_ARVALID,
        m_axi_aximm0_ARREADY => ap_const_logic_0,
        m_axi_aximm0_ARADDR => write_result_U0_m_axi_aximm0_ARADDR,
        m_axi_aximm0_ARID => write_result_U0_m_axi_aximm0_ARID,
        m_axi_aximm0_ARLEN => write_result_U0_m_axi_aximm0_ARLEN,
        m_axi_aximm0_ARSIZE => write_result_U0_m_axi_aximm0_ARSIZE,
        m_axi_aximm0_ARBURST => write_result_U0_m_axi_aximm0_ARBURST,
        m_axi_aximm0_ARLOCK => write_result_U0_m_axi_aximm0_ARLOCK,
        m_axi_aximm0_ARCACHE => write_result_U0_m_axi_aximm0_ARCACHE,
        m_axi_aximm0_ARPROT => write_result_U0_m_axi_aximm0_ARPROT,
        m_axi_aximm0_ARQOS => write_result_U0_m_axi_aximm0_ARQOS,
        m_axi_aximm0_ARREGION => write_result_U0_m_axi_aximm0_ARREGION,
        m_axi_aximm0_ARUSER => write_result_U0_m_axi_aximm0_ARUSER,
        m_axi_aximm0_RVALID => ap_const_logic_0,
        m_axi_aximm0_RREADY => write_result_U0_m_axi_aximm0_RREADY,
        m_axi_aximm0_RDATA => ap_const_lv64_0,
        m_axi_aximm0_RLAST => ap_const_logic_0,
        m_axi_aximm0_RID => ap_const_lv1_0,
        m_axi_aximm0_RUSER => ap_const_lv1_0,
        m_axi_aximm0_RRESP => ap_const_lv2_0,
        m_axi_aximm0_BVALID => m_axi_aximm0_BVALID,
        m_axi_aximm0_BREADY => write_result_U0_m_axi_aximm0_BREADY,
        m_axi_aximm0_BRESP => m_axi_aximm0_BRESP,
        m_axi_aximm0_BID => m_axi_aximm0_BID,
        m_axi_aximm0_BUSER => m_axi_aximm0_BUSER,
        empty => ap_const_lv16_0,
        send_data_dout => send_data_c_dout,
        send_data_empty_n => send_data_c_empty_n,
        send_data_read => write_result_U0_send_data_read,
        i_1_dout => i_1_c_dout,
        i_1_empty_n => i_1_c_empty_n,
        i_1_read => write_result_U0_i_1_read,
        output_length_dout => output_length_c_dout,
        output_length_empty_n => output_length_c_empty_n,
        output_length_read => write_result_U0_output_length_read,
        outStream_code_flg_dout => outStream_code_flg_dout,
        outStream_code_flg_empty_n => outStream_code_flg_empty_n,
        outStream_code_flg_read => write_result_U0_outStream_code_flg_read,
        outStream_code_dout => outStream_code_dout,
        outStream_code_empty_n => outStream_code_empty_n,
        outStream_code_read => write_result_U0_outStream_code_read,
        output_offset_constprop_i => output_offset_constprop_i,
        output_offset_constprop_o => write_result_U0_output_offset_constprop_o,
        output_offset_constprop_o_ap_vld => write_result_U0_output_offset_constprop_o_ap_vld);

    input_c1_U : component krnl_LZW_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_input_out_din,
        if_full_n => input_c1_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_input_out_write,
        if_dout => input_c1_dout,
        if_empty_n => input_c1_empty_n,
        if_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_r_read);

    send_data_c2_U : component krnl_LZW_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_send_data_out_din,
        if_full_n => send_data_c2_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_send_data_out_write,
        if_dout => send_data_c2_dout,
        if_empty_n => send_data_c2_empty_n,
        if_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_read);

    i_1_c3_U : component krnl_LZW_fifo_w7_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_i_1_out_din,
        if_full_n => i_1_c3_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_i_1_out_write,
        if_dout => i_1_c3_dout,
        if_empty_n => i_1_c3_empty_n,
        if_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_read);

    output_length_c4_U : component krnl_LZW_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_output_length_out_din,
        if_full_n => output_length_c4_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_output_length_out_write,
        if_dout => output_length_c4_dout,
        if_empty_n => output_length_c4_empty_n,
        if_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_read);

    input_c_U : component krnl_LZW_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_out_din,
        if_full_n => input_c_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_input_out_write,
        if_dout => input_c_dout,
        if_empty_n => input_c_empty_n,
        if_read => read_input_U0_input_r_read);

    send_data_c_U : component krnl_LZW_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_out_din,
        if_full_n => send_data_c_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_send_data_out_write,
        if_dout => send_data_c_dout,
        if_empty_n => send_data_c_empty_n,
        if_read => write_result_U0_send_data_read);

    i_1_c_U : component krnl_LZW_fifo_w7_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_out_din,
        if_full_n => i_1_c_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_i_1_out_write,
        if_dout => i_1_c_dout,
        if_empty_n => i_1_c_empty_n,
        if_read => write_result_U0_i_1_read);

    output_length_c_U : component krnl_LZW_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_out_din,
        if_full_n => output_length_c_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_output_length_out_write,
        if_dout => output_length_c_dout,
        if_empty_n => output_length_c_empty_n,
        if_read => write_result_U0_output_length_read);

    inStream_in_U : component krnl_LZW_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inStream_in_din,
        if_full_n => inStream_in_full_n,
        if_write => read_input_U0_inStream_in_write,
        if_dout => inStream_in_dout,
        if_empty_n => inStream_in_empty_n,
        if_read => compute_LZW_U0_inStream_in_read);

    outStream_code_flg_U : component krnl_LZW_fifo_w8_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_LZW_U0_outStream_code_flg_din,
        if_full_n => outStream_code_flg_full_n,
        if_write => compute_LZW_U0_outStream_code_flg_write,
        if_dout => outStream_code_flg_dout,
        if_empty_n => outStream_code_flg_empty_n,
        if_read => write_result_U0_outStream_code_flg_read);

    outStream_code_U : component krnl_LZW_fifo_w13_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_LZW_U0_outStream_code_din,
        if_full_n => outStream_code_full_n,
        if_write => compute_LZW_U0_outStream_code_write,
        if_dout => outStream_code_dout,
        if_empty_n => outStream_code_empty_n,
        if_read => write_result_U0_outStream_code_read);

    start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_U : component krnl_LZW_start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_din,
        if_full_n => start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_start_write,
        if_dout => start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_dout,
        if_empty_n => start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_empty_n,
        if_read => dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_ready);

    start_for_compute_LZW_U0_U : component krnl_LZW_start_for_compute_LZW_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute_LZW_U0_din,
        if_full_n => start_for_compute_LZW_U0_full_n,
        if_write => read_input_U0_start_write,
        if_dout => start_for_compute_LZW_U0_dout,
        if_empty_n => start_for_compute_LZW_U0_empty_n,
        if_read => compute_LZW_U0_ap_ready);





    ap_sync_reg_Block_entry_proc_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_entry_proc_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry_proc_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry_proc_proc_U0_ap_ready <= ap_sync_Block_entry_proc_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready <= ap_sync_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_input_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_input_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_input_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_input_U0_ap_ready <= ap_sync_read_input_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_write_result_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_write_result_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_write_result_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_write_result_U0_ap_ready <= ap_sync_write_result_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_entry_proc_proc_U0_ap_continue <= ap_const_logic_1;
    Block_entry_proc_proc_U0_ap_start <= ((ap_sync_reg_Block_entry_proc_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_entry_proc_proc_U0_start_full_n <= ap_const_logic_1;
    Block_entry_proc_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (write_result_U0_ap_idle and read_input_U0_ap_idle and dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_idle and dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_idle and compute_LZW_U0_ap_idle and Block_entry_proc_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Block_entry_proc_proc_U0_ap_ready <= (ap_sync_reg_Block_entry_proc_proc_U0_ap_ready or Block_entry_proc_proc_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready <= (dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready or ap_sync_reg_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready);
    ap_sync_done <= (write_result_U0_ap_done and read_input_U0_ap_done);
    ap_sync_read_input_U0_ap_ready <= (read_input_U0_ap_ready or ap_sync_reg_read_input_U0_ap_ready);
    ap_sync_ready <= (ap_sync_write_result_U0_ap_ready and ap_sync_read_input_U0_ap_ready and ap_sync_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready and ap_sync_Block_entry_proc_proc_U0_ap_ready);
    ap_sync_write_result_U0_ap_ready <= (write_result_U0_ap_ready or ap_sync_reg_write_result_U0_ap_ready);
    compute_LZW_U0_ap_continue <= ap_const_logic_1;
    compute_LZW_U0_ap_start <= start_for_compute_LZW_U0_empty_n;
    compute_LZW_U0_start_full_n <= ap_const_logic_1;
    compute_LZW_U0_start_write <= ap_const_logic_0;
    dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_start <= ((ap_sync_reg_dataflow_in_loop_VITIS_LOOP_346_2_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_ap_start <= start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_empty_n;
    dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_start_write <= ap_const_logic_0;
    inStream_in_length_read <= Block_entry_proc_proc_U0_inStream_in_length_read;
    input_offset_constprop_o <= read_input_U0_input_offset_constprop_o;
    input_offset_constprop_o_ap_vld <= read_input_U0_input_offset_constprop_o_ap_vld;
    m_axi_aximm0_ARADDR <= read_input_U0_m_axi_aximm0_ARADDR;
    m_axi_aximm0_ARBURST <= read_input_U0_m_axi_aximm0_ARBURST;
    m_axi_aximm0_ARCACHE <= read_input_U0_m_axi_aximm0_ARCACHE;
    m_axi_aximm0_ARID <= read_input_U0_m_axi_aximm0_ARID;
    m_axi_aximm0_ARLEN <= read_input_U0_m_axi_aximm0_ARLEN;
    m_axi_aximm0_ARLOCK <= read_input_U0_m_axi_aximm0_ARLOCK;
    m_axi_aximm0_ARPROT <= read_input_U0_m_axi_aximm0_ARPROT;
    m_axi_aximm0_ARQOS <= read_input_U0_m_axi_aximm0_ARQOS;
    m_axi_aximm0_ARREGION <= read_input_U0_m_axi_aximm0_ARREGION;
    m_axi_aximm0_ARSIZE <= read_input_U0_m_axi_aximm0_ARSIZE;
    m_axi_aximm0_ARUSER <= read_input_U0_m_axi_aximm0_ARUSER;
    m_axi_aximm0_ARVALID <= read_input_U0_m_axi_aximm0_ARVALID;
    m_axi_aximm0_AWADDR <= write_result_U0_m_axi_aximm0_AWADDR;
    m_axi_aximm0_AWBURST <= write_result_U0_m_axi_aximm0_AWBURST;
    m_axi_aximm0_AWCACHE <= write_result_U0_m_axi_aximm0_AWCACHE;
    m_axi_aximm0_AWID <= write_result_U0_m_axi_aximm0_AWID;
    m_axi_aximm0_AWLEN <= write_result_U0_m_axi_aximm0_AWLEN;
    m_axi_aximm0_AWLOCK <= write_result_U0_m_axi_aximm0_AWLOCK;
    m_axi_aximm0_AWPROT <= write_result_U0_m_axi_aximm0_AWPROT;
    m_axi_aximm0_AWQOS <= write_result_U0_m_axi_aximm0_AWQOS;
    m_axi_aximm0_AWREGION <= write_result_U0_m_axi_aximm0_AWREGION;
    m_axi_aximm0_AWSIZE <= write_result_U0_m_axi_aximm0_AWSIZE;
    m_axi_aximm0_AWUSER <= write_result_U0_m_axi_aximm0_AWUSER;
    m_axi_aximm0_AWVALID <= write_result_U0_m_axi_aximm0_AWVALID;
    m_axi_aximm0_BREADY <= write_result_U0_m_axi_aximm0_BREADY;
    m_axi_aximm0_RREADY <= read_input_U0_m_axi_aximm0_RREADY;
    m_axi_aximm0_WDATA <= write_result_U0_m_axi_aximm0_WDATA;
    m_axi_aximm0_WID <= write_result_U0_m_axi_aximm0_WID;
    m_axi_aximm0_WLAST <= write_result_U0_m_axi_aximm0_WLAST;
    m_axi_aximm0_WSTRB <= write_result_U0_m_axi_aximm0_WSTRB;
    m_axi_aximm0_WUSER <= write_result_U0_m_axi_aximm0_WUSER;
    m_axi_aximm0_WVALID <= write_result_U0_m_axi_aximm0_WVALID;
    output_offset_constprop_o <= write_result_U0_output_offset_constprop_o;
    output_offset_constprop_o_ap_vld <= write_result_U0_output_offset_constprop_o_ap_vld;
    read_input_U0_ap_continue <= ap_sync_continue;
    read_input_U0_ap_start <= ((ap_sync_reg_read_input_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_compute_LZW_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_dataflow_in_loop_VITIS_LOOP_346_2_entry6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_result_U0_ap_continue <= ap_sync_continue;
    write_result_U0_ap_start <= ((ap_sync_reg_write_result_U0_ap_ready xor ap_const_logic_1) and ap_start);
    write_result_U0_start_full_n <= ap_const_logic_1;
    write_result_U0_start_write <= ap_const_logic_0;
end behav;
