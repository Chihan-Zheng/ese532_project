// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_LZW_read_input (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_aximm0_AWVALID,
        m_axi_aximm0_AWREADY,
        m_axi_aximm0_AWADDR,
        m_axi_aximm0_AWID,
        m_axi_aximm0_AWLEN,
        m_axi_aximm0_AWSIZE,
        m_axi_aximm0_AWBURST,
        m_axi_aximm0_AWLOCK,
        m_axi_aximm0_AWCACHE,
        m_axi_aximm0_AWPROT,
        m_axi_aximm0_AWQOS,
        m_axi_aximm0_AWREGION,
        m_axi_aximm0_AWUSER,
        m_axi_aximm0_WVALID,
        m_axi_aximm0_WREADY,
        m_axi_aximm0_WDATA,
        m_axi_aximm0_WSTRB,
        m_axi_aximm0_WLAST,
        m_axi_aximm0_WID,
        m_axi_aximm0_WUSER,
        m_axi_aximm0_ARVALID,
        m_axi_aximm0_ARREADY,
        m_axi_aximm0_ARADDR,
        m_axi_aximm0_ARID,
        m_axi_aximm0_ARLEN,
        m_axi_aximm0_ARSIZE,
        m_axi_aximm0_ARBURST,
        m_axi_aximm0_ARLOCK,
        m_axi_aximm0_ARCACHE,
        m_axi_aximm0_ARPROT,
        m_axi_aximm0_ARQOS,
        m_axi_aximm0_ARREGION,
        m_axi_aximm0_ARUSER,
        m_axi_aximm0_RVALID,
        m_axi_aximm0_RREADY,
        m_axi_aximm0_RDATA,
        m_axi_aximm0_RLAST,
        m_axi_aximm0_RID,
        m_axi_aximm0_RUSER,
        m_axi_aximm0_RRESP,
        m_axi_aximm0_BVALID,
        m_axi_aximm0_BREADY,
        m_axi_aximm0_BRESP,
        m_axi_aximm0_BID,
        m_axi_aximm0_BUSER,
        input_r_dout,
        input_r_empty_n,
        input_r_read,
        empty,
        input_offset_constprop_i,
        input_offset_constprop_o,
        input_offset_constprop_o_ap_vld,
        inStream_in_din,
        inStream_in_full_n,
        inStream_in_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state75 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_aximm0_AWVALID;
input   m_axi_aximm0_AWREADY;
output  [63:0] m_axi_aximm0_AWADDR;
output  [0:0] m_axi_aximm0_AWID;
output  [31:0] m_axi_aximm0_AWLEN;
output  [2:0] m_axi_aximm0_AWSIZE;
output  [1:0] m_axi_aximm0_AWBURST;
output  [1:0] m_axi_aximm0_AWLOCK;
output  [3:0] m_axi_aximm0_AWCACHE;
output  [2:0] m_axi_aximm0_AWPROT;
output  [3:0] m_axi_aximm0_AWQOS;
output  [3:0] m_axi_aximm0_AWREGION;
output  [0:0] m_axi_aximm0_AWUSER;
output   m_axi_aximm0_WVALID;
input   m_axi_aximm0_WREADY;
output  [63:0] m_axi_aximm0_WDATA;
output  [7:0] m_axi_aximm0_WSTRB;
output   m_axi_aximm0_WLAST;
output  [0:0] m_axi_aximm0_WID;
output  [0:0] m_axi_aximm0_WUSER;
output   m_axi_aximm0_ARVALID;
input   m_axi_aximm0_ARREADY;
output  [63:0] m_axi_aximm0_ARADDR;
output  [0:0] m_axi_aximm0_ARID;
output  [31:0] m_axi_aximm0_ARLEN;
output  [2:0] m_axi_aximm0_ARSIZE;
output  [1:0] m_axi_aximm0_ARBURST;
output  [1:0] m_axi_aximm0_ARLOCK;
output  [3:0] m_axi_aximm0_ARCACHE;
output  [2:0] m_axi_aximm0_ARPROT;
output  [3:0] m_axi_aximm0_ARQOS;
output  [3:0] m_axi_aximm0_ARREGION;
output  [0:0] m_axi_aximm0_ARUSER;
input   m_axi_aximm0_RVALID;
output   m_axi_aximm0_RREADY;
input  [63:0] m_axi_aximm0_RDATA;
input   m_axi_aximm0_RLAST;
input  [0:0] m_axi_aximm0_RID;
input  [0:0] m_axi_aximm0_RUSER;
input  [1:0] m_axi_aximm0_RRESP;
input   m_axi_aximm0_BVALID;
output   m_axi_aximm0_BREADY;
input  [1:0] m_axi_aximm0_BRESP;
input  [0:0] m_axi_aximm0_BID;
input  [0:0] m_axi_aximm0_BUSER;
input  [63:0] input_r_dout;
input   input_r_empty_n;
output   input_r_read;
input  [15:0] empty;
input  [31:0] input_offset_constprop_i;
output  [31:0] input_offset_constprop_o;
output   input_offset_constprop_o_ap_vld;
output  [7:0] inStream_in_din;
input   inStream_in_full_n;
output   inStream_in_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_aximm0_ARVALID;
reg m_axi_aximm0_RREADY;
reg input_r_read;
reg[31:0] input_offset_constprop_o;
reg input_offset_constprop_o_ap_vld;
reg inStream_in_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    aximm0_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln46_reg_270;
reg    aximm0_blk_n_R;
reg    ap_enable_reg_pp0_iter71;
reg   [0:0] icmp_ln46_reg_270_pp0_iter70_reg;
reg    input_r_blk_n;
reg    inStream_in_blk_n;
reg    ap_enable_reg_pp0_iter72;
reg   [0:0] icmp_ln46_reg_270_pp0_iter71_reg;
reg   [15:0] i_reg_107;
reg   [63:0] input_read_reg_232;
wire   [31:0] conv_i_i_i_fu_118_p1;
reg   [31:0] conv_i_i_i_reg_242;
wire   [32:0] zext_ln46_fu_126_p1;
reg   [32:0] zext_ln46_reg_250;
wire   [2:0] trunc_ln46_fu_130_p1;
reg   [2:0] trunc_ln46_reg_255;
wire   [2:0] trunc_ln46_1_fu_134_p1;
reg   [2:0] trunc_ln46_1_reg_260;
wire   [15:0] add_ln46_fu_138_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
wire    ap_block_state44_pp0_stage0_iter42;
wire    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
wire    ap_block_state47_pp0_stage0_iter45;
wire    ap_block_state48_pp0_stage0_iter46;
wire    ap_block_state49_pp0_stage0_iter47;
wire    ap_block_state50_pp0_stage0_iter48;
wire    ap_block_state51_pp0_stage0_iter49;
wire    ap_block_state52_pp0_stage0_iter50;
wire    ap_block_state53_pp0_stage0_iter51;
wire    ap_block_state54_pp0_stage0_iter52;
wire    ap_block_state55_pp0_stage0_iter53;
wire    ap_block_state56_pp0_stage0_iter54;
wire    ap_block_state57_pp0_stage0_iter55;
wire    ap_block_state58_pp0_stage0_iter56;
wire    ap_block_state59_pp0_stage0_iter57;
wire    ap_block_state60_pp0_stage0_iter58;
wire    ap_block_state61_pp0_stage0_iter59;
wire    ap_block_state62_pp0_stage0_iter60;
wire    ap_block_state63_pp0_stage0_iter61;
wire    ap_block_state64_pp0_stage0_iter62;
wire    ap_block_state65_pp0_stage0_iter63;
wire    ap_block_state66_pp0_stage0_iter64;
wire    ap_block_state67_pp0_stage0_iter65;
wire    ap_block_state68_pp0_stage0_iter66;
wire    ap_block_state69_pp0_stage0_iter67;
wire    ap_block_state70_pp0_stage0_iter68;
wire    ap_block_state71_pp0_stage0_iter69;
wire    ap_block_state72_pp0_stage0_iter70;
reg    ap_block_state73_pp0_stage0_iter71;
reg    ap_block_state74_pp0_stage0_iter72;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_144_p2;
reg   [0:0] icmp_ln46_reg_270_pp0_iter1_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter2_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter3_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter4_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter5_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter6_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter7_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter8_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter9_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter10_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter11_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter12_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter13_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter14_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter15_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter16_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter17_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter18_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter19_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter20_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter21_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter22_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter23_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter24_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter25_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter26_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter27_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter28_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter29_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter30_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter31_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter32_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter33_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter34_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter35_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter36_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter37_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter38_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter39_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter40_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter41_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter42_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter43_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter44_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter45_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter46_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter47_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter48_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter49_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter50_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter51_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter52_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter53_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter54_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter55_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter56_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter57_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter58_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter59_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter60_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter61_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter62_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter63_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter64_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter65_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter66_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter67_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter68_reg;
reg   [0:0] icmp_ln46_reg_270_pp0_iter69_reg;
reg   [60:0] trunc_ln174_1_reg_274;
wire   [2:0] add_ln174_2_fu_186_p2;
reg   [2:0] add_ln174_2_reg_279;
reg   [2:0] add_ln174_2_reg_279_pp0_iter1_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter2_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter3_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter4_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter5_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter6_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter7_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter8_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter9_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter10_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter11_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter12_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter13_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter14_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter15_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter16_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter17_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter18_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter19_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter20_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter21_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter22_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter23_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter24_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter25_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter26_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter27_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter28_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter29_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter30_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter31_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter32_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter33_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter34_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter35_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter36_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter37_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter38_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter39_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter40_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter41_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter42_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter43_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter44_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter45_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter46_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter47_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter48_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter49_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter50_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter51_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter52_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter53_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter54_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter55_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter56_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter57_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter58_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter59_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter60_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter61_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter62_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter63_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter64_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter65_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter66_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter67_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter68_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter69_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter70_reg;
reg   [2:0] add_ln174_2_reg_279_pp0_iter71_reg;
reg   [63:0] aximm0_addr_read_reg_290;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
wire  signed [63:0] sext_ln174_fu_191_p1;
wire   [31:0] add_ln51_fu_222_p2;
wire    ap_CS_fsm_state75;
reg    ap_block_pp0_stage0_01001;
wire   [32:0] i_cast_fu_149_p1;
wire   [32:0] add_ln174_fu_157_p2;
wire   [63:0] zext_ln174_fu_162_p1;
wire   [63:0] add_ln174_1_fu_166_p2;
wire   [2:0] trunc_ln174_fu_153_p1;
wire   [2:0] add_ln174_3_fu_181_p2;
wire   [5:0] shl_ln_fu_201_p3;
wire   [63:0] zext_ln174_1_fu_208_p1;
wire   [63:0] lshr_ln174_fu_212_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state75)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (input_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end else if ((~((real_start == 1'b0) | (input_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter72 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (input_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_107 <= 16'd0;
    end else if (((icmp_ln46_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_107 <= add_ln46_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln174_2_reg_279 <= add_ln174_2_fu_186_p2;
        trunc_ln174_1_reg_274 <= {{add_ln174_1_fu_166_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln174_2_reg_279_pp0_iter10_reg <= add_ln174_2_reg_279_pp0_iter9_reg;
        add_ln174_2_reg_279_pp0_iter11_reg <= add_ln174_2_reg_279_pp0_iter10_reg;
        add_ln174_2_reg_279_pp0_iter12_reg <= add_ln174_2_reg_279_pp0_iter11_reg;
        add_ln174_2_reg_279_pp0_iter13_reg <= add_ln174_2_reg_279_pp0_iter12_reg;
        add_ln174_2_reg_279_pp0_iter14_reg <= add_ln174_2_reg_279_pp0_iter13_reg;
        add_ln174_2_reg_279_pp0_iter15_reg <= add_ln174_2_reg_279_pp0_iter14_reg;
        add_ln174_2_reg_279_pp0_iter16_reg <= add_ln174_2_reg_279_pp0_iter15_reg;
        add_ln174_2_reg_279_pp0_iter17_reg <= add_ln174_2_reg_279_pp0_iter16_reg;
        add_ln174_2_reg_279_pp0_iter18_reg <= add_ln174_2_reg_279_pp0_iter17_reg;
        add_ln174_2_reg_279_pp0_iter19_reg <= add_ln174_2_reg_279_pp0_iter18_reg;
        add_ln174_2_reg_279_pp0_iter20_reg <= add_ln174_2_reg_279_pp0_iter19_reg;
        add_ln174_2_reg_279_pp0_iter21_reg <= add_ln174_2_reg_279_pp0_iter20_reg;
        add_ln174_2_reg_279_pp0_iter22_reg <= add_ln174_2_reg_279_pp0_iter21_reg;
        add_ln174_2_reg_279_pp0_iter23_reg <= add_ln174_2_reg_279_pp0_iter22_reg;
        add_ln174_2_reg_279_pp0_iter24_reg <= add_ln174_2_reg_279_pp0_iter23_reg;
        add_ln174_2_reg_279_pp0_iter25_reg <= add_ln174_2_reg_279_pp0_iter24_reg;
        add_ln174_2_reg_279_pp0_iter26_reg <= add_ln174_2_reg_279_pp0_iter25_reg;
        add_ln174_2_reg_279_pp0_iter27_reg <= add_ln174_2_reg_279_pp0_iter26_reg;
        add_ln174_2_reg_279_pp0_iter28_reg <= add_ln174_2_reg_279_pp0_iter27_reg;
        add_ln174_2_reg_279_pp0_iter29_reg <= add_ln174_2_reg_279_pp0_iter28_reg;
        add_ln174_2_reg_279_pp0_iter2_reg <= add_ln174_2_reg_279_pp0_iter1_reg;
        add_ln174_2_reg_279_pp0_iter30_reg <= add_ln174_2_reg_279_pp0_iter29_reg;
        add_ln174_2_reg_279_pp0_iter31_reg <= add_ln174_2_reg_279_pp0_iter30_reg;
        add_ln174_2_reg_279_pp0_iter32_reg <= add_ln174_2_reg_279_pp0_iter31_reg;
        add_ln174_2_reg_279_pp0_iter33_reg <= add_ln174_2_reg_279_pp0_iter32_reg;
        add_ln174_2_reg_279_pp0_iter34_reg <= add_ln174_2_reg_279_pp0_iter33_reg;
        add_ln174_2_reg_279_pp0_iter35_reg <= add_ln174_2_reg_279_pp0_iter34_reg;
        add_ln174_2_reg_279_pp0_iter36_reg <= add_ln174_2_reg_279_pp0_iter35_reg;
        add_ln174_2_reg_279_pp0_iter37_reg <= add_ln174_2_reg_279_pp0_iter36_reg;
        add_ln174_2_reg_279_pp0_iter38_reg <= add_ln174_2_reg_279_pp0_iter37_reg;
        add_ln174_2_reg_279_pp0_iter39_reg <= add_ln174_2_reg_279_pp0_iter38_reg;
        add_ln174_2_reg_279_pp0_iter3_reg <= add_ln174_2_reg_279_pp0_iter2_reg;
        add_ln174_2_reg_279_pp0_iter40_reg <= add_ln174_2_reg_279_pp0_iter39_reg;
        add_ln174_2_reg_279_pp0_iter41_reg <= add_ln174_2_reg_279_pp0_iter40_reg;
        add_ln174_2_reg_279_pp0_iter42_reg <= add_ln174_2_reg_279_pp0_iter41_reg;
        add_ln174_2_reg_279_pp0_iter43_reg <= add_ln174_2_reg_279_pp0_iter42_reg;
        add_ln174_2_reg_279_pp0_iter44_reg <= add_ln174_2_reg_279_pp0_iter43_reg;
        add_ln174_2_reg_279_pp0_iter45_reg <= add_ln174_2_reg_279_pp0_iter44_reg;
        add_ln174_2_reg_279_pp0_iter46_reg <= add_ln174_2_reg_279_pp0_iter45_reg;
        add_ln174_2_reg_279_pp0_iter47_reg <= add_ln174_2_reg_279_pp0_iter46_reg;
        add_ln174_2_reg_279_pp0_iter48_reg <= add_ln174_2_reg_279_pp0_iter47_reg;
        add_ln174_2_reg_279_pp0_iter49_reg <= add_ln174_2_reg_279_pp0_iter48_reg;
        add_ln174_2_reg_279_pp0_iter4_reg <= add_ln174_2_reg_279_pp0_iter3_reg;
        add_ln174_2_reg_279_pp0_iter50_reg <= add_ln174_2_reg_279_pp0_iter49_reg;
        add_ln174_2_reg_279_pp0_iter51_reg <= add_ln174_2_reg_279_pp0_iter50_reg;
        add_ln174_2_reg_279_pp0_iter52_reg <= add_ln174_2_reg_279_pp0_iter51_reg;
        add_ln174_2_reg_279_pp0_iter53_reg <= add_ln174_2_reg_279_pp0_iter52_reg;
        add_ln174_2_reg_279_pp0_iter54_reg <= add_ln174_2_reg_279_pp0_iter53_reg;
        add_ln174_2_reg_279_pp0_iter55_reg <= add_ln174_2_reg_279_pp0_iter54_reg;
        add_ln174_2_reg_279_pp0_iter56_reg <= add_ln174_2_reg_279_pp0_iter55_reg;
        add_ln174_2_reg_279_pp0_iter57_reg <= add_ln174_2_reg_279_pp0_iter56_reg;
        add_ln174_2_reg_279_pp0_iter58_reg <= add_ln174_2_reg_279_pp0_iter57_reg;
        add_ln174_2_reg_279_pp0_iter59_reg <= add_ln174_2_reg_279_pp0_iter58_reg;
        add_ln174_2_reg_279_pp0_iter5_reg <= add_ln174_2_reg_279_pp0_iter4_reg;
        add_ln174_2_reg_279_pp0_iter60_reg <= add_ln174_2_reg_279_pp0_iter59_reg;
        add_ln174_2_reg_279_pp0_iter61_reg <= add_ln174_2_reg_279_pp0_iter60_reg;
        add_ln174_2_reg_279_pp0_iter62_reg <= add_ln174_2_reg_279_pp0_iter61_reg;
        add_ln174_2_reg_279_pp0_iter63_reg <= add_ln174_2_reg_279_pp0_iter62_reg;
        add_ln174_2_reg_279_pp0_iter64_reg <= add_ln174_2_reg_279_pp0_iter63_reg;
        add_ln174_2_reg_279_pp0_iter65_reg <= add_ln174_2_reg_279_pp0_iter64_reg;
        add_ln174_2_reg_279_pp0_iter66_reg <= add_ln174_2_reg_279_pp0_iter65_reg;
        add_ln174_2_reg_279_pp0_iter67_reg <= add_ln174_2_reg_279_pp0_iter66_reg;
        add_ln174_2_reg_279_pp0_iter68_reg <= add_ln174_2_reg_279_pp0_iter67_reg;
        add_ln174_2_reg_279_pp0_iter69_reg <= add_ln174_2_reg_279_pp0_iter68_reg;
        add_ln174_2_reg_279_pp0_iter6_reg <= add_ln174_2_reg_279_pp0_iter5_reg;
        add_ln174_2_reg_279_pp0_iter70_reg <= add_ln174_2_reg_279_pp0_iter69_reg;
        add_ln174_2_reg_279_pp0_iter71_reg <= add_ln174_2_reg_279_pp0_iter70_reg;
        add_ln174_2_reg_279_pp0_iter7_reg <= add_ln174_2_reg_279_pp0_iter6_reg;
        add_ln174_2_reg_279_pp0_iter8_reg <= add_ln174_2_reg_279_pp0_iter7_reg;
        add_ln174_2_reg_279_pp0_iter9_reg <= add_ln174_2_reg_279_pp0_iter8_reg;
        icmp_ln46_reg_270_pp0_iter10_reg <= icmp_ln46_reg_270_pp0_iter9_reg;
        icmp_ln46_reg_270_pp0_iter11_reg <= icmp_ln46_reg_270_pp0_iter10_reg;
        icmp_ln46_reg_270_pp0_iter12_reg <= icmp_ln46_reg_270_pp0_iter11_reg;
        icmp_ln46_reg_270_pp0_iter13_reg <= icmp_ln46_reg_270_pp0_iter12_reg;
        icmp_ln46_reg_270_pp0_iter14_reg <= icmp_ln46_reg_270_pp0_iter13_reg;
        icmp_ln46_reg_270_pp0_iter15_reg <= icmp_ln46_reg_270_pp0_iter14_reg;
        icmp_ln46_reg_270_pp0_iter16_reg <= icmp_ln46_reg_270_pp0_iter15_reg;
        icmp_ln46_reg_270_pp0_iter17_reg <= icmp_ln46_reg_270_pp0_iter16_reg;
        icmp_ln46_reg_270_pp0_iter18_reg <= icmp_ln46_reg_270_pp0_iter17_reg;
        icmp_ln46_reg_270_pp0_iter19_reg <= icmp_ln46_reg_270_pp0_iter18_reg;
        icmp_ln46_reg_270_pp0_iter20_reg <= icmp_ln46_reg_270_pp0_iter19_reg;
        icmp_ln46_reg_270_pp0_iter21_reg <= icmp_ln46_reg_270_pp0_iter20_reg;
        icmp_ln46_reg_270_pp0_iter22_reg <= icmp_ln46_reg_270_pp0_iter21_reg;
        icmp_ln46_reg_270_pp0_iter23_reg <= icmp_ln46_reg_270_pp0_iter22_reg;
        icmp_ln46_reg_270_pp0_iter24_reg <= icmp_ln46_reg_270_pp0_iter23_reg;
        icmp_ln46_reg_270_pp0_iter25_reg <= icmp_ln46_reg_270_pp0_iter24_reg;
        icmp_ln46_reg_270_pp0_iter26_reg <= icmp_ln46_reg_270_pp0_iter25_reg;
        icmp_ln46_reg_270_pp0_iter27_reg <= icmp_ln46_reg_270_pp0_iter26_reg;
        icmp_ln46_reg_270_pp0_iter28_reg <= icmp_ln46_reg_270_pp0_iter27_reg;
        icmp_ln46_reg_270_pp0_iter29_reg <= icmp_ln46_reg_270_pp0_iter28_reg;
        icmp_ln46_reg_270_pp0_iter2_reg <= icmp_ln46_reg_270_pp0_iter1_reg;
        icmp_ln46_reg_270_pp0_iter30_reg <= icmp_ln46_reg_270_pp0_iter29_reg;
        icmp_ln46_reg_270_pp0_iter31_reg <= icmp_ln46_reg_270_pp0_iter30_reg;
        icmp_ln46_reg_270_pp0_iter32_reg <= icmp_ln46_reg_270_pp0_iter31_reg;
        icmp_ln46_reg_270_pp0_iter33_reg <= icmp_ln46_reg_270_pp0_iter32_reg;
        icmp_ln46_reg_270_pp0_iter34_reg <= icmp_ln46_reg_270_pp0_iter33_reg;
        icmp_ln46_reg_270_pp0_iter35_reg <= icmp_ln46_reg_270_pp0_iter34_reg;
        icmp_ln46_reg_270_pp0_iter36_reg <= icmp_ln46_reg_270_pp0_iter35_reg;
        icmp_ln46_reg_270_pp0_iter37_reg <= icmp_ln46_reg_270_pp0_iter36_reg;
        icmp_ln46_reg_270_pp0_iter38_reg <= icmp_ln46_reg_270_pp0_iter37_reg;
        icmp_ln46_reg_270_pp0_iter39_reg <= icmp_ln46_reg_270_pp0_iter38_reg;
        icmp_ln46_reg_270_pp0_iter3_reg <= icmp_ln46_reg_270_pp0_iter2_reg;
        icmp_ln46_reg_270_pp0_iter40_reg <= icmp_ln46_reg_270_pp0_iter39_reg;
        icmp_ln46_reg_270_pp0_iter41_reg <= icmp_ln46_reg_270_pp0_iter40_reg;
        icmp_ln46_reg_270_pp0_iter42_reg <= icmp_ln46_reg_270_pp0_iter41_reg;
        icmp_ln46_reg_270_pp0_iter43_reg <= icmp_ln46_reg_270_pp0_iter42_reg;
        icmp_ln46_reg_270_pp0_iter44_reg <= icmp_ln46_reg_270_pp0_iter43_reg;
        icmp_ln46_reg_270_pp0_iter45_reg <= icmp_ln46_reg_270_pp0_iter44_reg;
        icmp_ln46_reg_270_pp0_iter46_reg <= icmp_ln46_reg_270_pp0_iter45_reg;
        icmp_ln46_reg_270_pp0_iter47_reg <= icmp_ln46_reg_270_pp0_iter46_reg;
        icmp_ln46_reg_270_pp0_iter48_reg <= icmp_ln46_reg_270_pp0_iter47_reg;
        icmp_ln46_reg_270_pp0_iter49_reg <= icmp_ln46_reg_270_pp0_iter48_reg;
        icmp_ln46_reg_270_pp0_iter4_reg <= icmp_ln46_reg_270_pp0_iter3_reg;
        icmp_ln46_reg_270_pp0_iter50_reg <= icmp_ln46_reg_270_pp0_iter49_reg;
        icmp_ln46_reg_270_pp0_iter51_reg <= icmp_ln46_reg_270_pp0_iter50_reg;
        icmp_ln46_reg_270_pp0_iter52_reg <= icmp_ln46_reg_270_pp0_iter51_reg;
        icmp_ln46_reg_270_pp0_iter53_reg <= icmp_ln46_reg_270_pp0_iter52_reg;
        icmp_ln46_reg_270_pp0_iter54_reg <= icmp_ln46_reg_270_pp0_iter53_reg;
        icmp_ln46_reg_270_pp0_iter55_reg <= icmp_ln46_reg_270_pp0_iter54_reg;
        icmp_ln46_reg_270_pp0_iter56_reg <= icmp_ln46_reg_270_pp0_iter55_reg;
        icmp_ln46_reg_270_pp0_iter57_reg <= icmp_ln46_reg_270_pp0_iter56_reg;
        icmp_ln46_reg_270_pp0_iter58_reg <= icmp_ln46_reg_270_pp0_iter57_reg;
        icmp_ln46_reg_270_pp0_iter59_reg <= icmp_ln46_reg_270_pp0_iter58_reg;
        icmp_ln46_reg_270_pp0_iter5_reg <= icmp_ln46_reg_270_pp0_iter4_reg;
        icmp_ln46_reg_270_pp0_iter60_reg <= icmp_ln46_reg_270_pp0_iter59_reg;
        icmp_ln46_reg_270_pp0_iter61_reg <= icmp_ln46_reg_270_pp0_iter60_reg;
        icmp_ln46_reg_270_pp0_iter62_reg <= icmp_ln46_reg_270_pp0_iter61_reg;
        icmp_ln46_reg_270_pp0_iter63_reg <= icmp_ln46_reg_270_pp0_iter62_reg;
        icmp_ln46_reg_270_pp0_iter64_reg <= icmp_ln46_reg_270_pp0_iter63_reg;
        icmp_ln46_reg_270_pp0_iter65_reg <= icmp_ln46_reg_270_pp0_iter64_reg;
        icmp_ln46_reg_270_pp0_iter66_reg <= icmp_ln46_reg_270_pp0_iter65_reg;
        icmp_ln46_reg_270_pp0_iter67_reg <= icmp_ln46_reg_270_pp0_iter66_reg;
        icmp_ln46_reg_270_pp0_iter68_reg <= icmp_ln46_reg_270_pp0_iter67_reg;
        icmp_ln46_reg_270_pp0_iter69_reg <= icmp_ln46_reg_270_pp0_iter68_reg;
        icmp_ln46_reg_270_pp0_iter6_reg <= icmp_ln46_reg_270_pp0_iter5_reg;
        icmp_ln46_reg_270_pp0_iter70_reg <= icmp_ln46_reg_270_pp0_iter69_reg;
        icmp_ln46_reg_270_pp0_iter71_reg <= icmp_ln46_reg_270_pp0_iter70_reg;
        icmp_ln46_reg_270_pp0_iter7_reg <= icmp_ln46_reg_270_pp0_iter6_reg;
        icmp_ln46_reg_270_pp0_iter8_reg <= icmp_ln46_reg_270_pp0_iter7_reg;
        icmp_ln46_reg_270_pp0_iter9_reg <= icmp_ln46_reg_270_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln174_2_reg_279_pp0_iter1_reg <= add_ln174_2_reg_279;
        icmp_ln46_reg_270 <= icmp_ln46_fu_144_p2;
        icmp_ln46_reg_270_pp0_iter1_reg <= icmp_ln46_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_270_pp0_iter70_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aximm0_addr_read_reg_290 <= m_axi_aximm0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        conv_i_i_i_reg_242[15 : 0] <= conv_i_i_i_fu_118_p1[15 : 0];
        input_read_reg_232 <= input_r_dout;
        trunc_ln46_1_reg_260 <= trunc_ln46_1_fu_134_p1;
        trunc_ln46_reg_255 <= trunc_ln46_fu_130_p1;
        zext_ln46_reg_250[31 : 0] <= zext_ln46_fu_126_p1[31 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_144_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        aximm0_blk_n_AR = m_axi_aximm0_ARREADY;
    end else begin
        aximm0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_270_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aximm0_blk_n_R = m_axi_aximm0_RVALID;
    end else begin
        aximm0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_270_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        inStream_in_blk_n = inStream_in_full_n;
    end else begin
        inStream_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_270_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inStream_in_write = 1'b1;
    end else begin
        inStream_in_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        input_offset_constprop_o = add_ln51_fu_222_p2;
    end else begin
        input_offset_constprop_o = input_offset_constprop_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        input_offset_constprop_o_ap_vld = 1'b1;
    end else begin
        input_offset_constprop_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_r_blk_n = input_r_empty_n;
    end else begin
        input_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (input_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_r_read = 1'b1;
    end else begin
        input_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_aximm0_ARVALID = 1'b1;
    end else begin
        m_axi_aximm0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_270_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_aximm0_RREADY = 1'b1;
    end else begin
        m_axi_aximm0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (input_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln46_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter72 == 1'b1) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln46_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter72 == 1'b1) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln174_1_fu_166_p2 = (zext_ln174_fu_162_p1 + input_read_reg_232);

assign add_ln174_2_fu_186_p2 = (add_ln174_3_fu_181_p2 + trunc_ln46_1_reg_260);

assign add_ln174_3_fu_181_p2 = (trunc_ln46_reg_255 + trunc_ln174_fu_153_p1);

assign add_ln174_fu_157_p2 = (zext_ln46_reg_250 + i_cast_fu_149_p1);

assign add_ln46_fu_138_p2 = (i_reg_107 + 16'd1);

assign add_ln51_fu_222_p2 = (input_offset_constprop_i + conv_i_i_i_reg_242);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_axi_aximm0_RVALID == 1'b0) & (icmp_ln46_reg_270_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1)) | ((icmp_ln46_reg_270_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (inStream_in_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_aximm0_RVALID == 1'b0) & (icmp_ln46_reg_270_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln46_reg_270_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (inStream_in_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_aximm0_RVALID == 1'b0) & (icmp_ln46_reg_270_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln46_reg_270_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (inStream_in_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (input_r_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_aximm0_ARREADY == 1'b0) & (icmp_ln46_reg_270 == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp0_stage0_iter71 = ((m_axi_aximm0_RVALID == 1'b0) & (icmp_ln46_reg_270_pp0_iter70_reg == 1'd0));
end

always @ (*) begin
    ap_block_state74_pp0_stage0_iter72 = ((icmp_ln46_reg_270_pp0_iter71_reg == 1'd0) & (inStream_in_full_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign conv_i_i_i_fu_118_p1 = empty;

assign i_cast_fu_149_p1 = i_reg_107;

assign icmp_ln46_fu_144_p2 = ((i_reg_107 == empty) ? 1'b1 : 1'b0);

assign inStream_in_din = lshr_ln174_fu_212_p2[7:0];

assign lshr_ln174_fu_212_p2 = aximm0_addr_read_reg_290 >> zext_ln174_1_fu_208_p1;

assign m_axi_aximm0_ARADDR = sext_ln174_fu_191_p1;

assign m_axi_aximm0_ARBURST = 2'd0;

assign m_axi_aximm0_ARCACHE = 4'd0;

assign m_axi_aximm0_ARID = 1'd0;

assign m_axi_aximm0_ARLEN = 32'd1;

assign m_axi_aximm0_ARLOCK = 2'd0;

assign m_axi_aximm0_ARPROT = 3'd0;

assign m_axi_aximm0_ARQOS = 4'd0;

assign m_axi_aximm0_ARREGION = 4'd0;

assign m_axi_aximm0_ARSIZE = 3'd0;

assign m_axi_aximm0_ARUSER = 1'd0;

assign m_axi_aximm0_AWADDR = 64'd0;

assign m_axi_aximm0_AWBURST = 2'd0;

assign m_axi_aximm0_AWCACHE = 4'd0;

assign m_axi_aximm0_AWID = 1'd0;

assign m_axi_aximm0_AWLEN = 32'd0;

assign m_axi_aximm0_AWLOCK = 2'd0;

assign m_axi_aximm0_AWPROT = 3'd0;

assign m_axi_aximm0_AWQOS = 4'd0;

assign m_axi_aximm0_AWREGION = 4'd0;

assign m_axi_aximm0_AWSIZE = 3'd0;

assign m_axi_aximm0_AWUSER = 1'd0;

assign m_axi_aximm0_AWVALID = 1'b0;

assign m_axi_aximm0_BREADY = 1'b0;

assign m_axi_aximm0_WDATA = 64'd0;

assign m_axi_aximm0_WID = 1'd0;

assign m_axi_aximm0_WLAST = 1'b0;

assign m_axi_aximm0_WSTRB = 8'd0;

assign m_axi_aximm0_WUSER = 1'd0;

assign m_axi_aximm0_WVALID = 1'b0;

assign sext_ln174_fu_191_p1 = $signed(trunc_ln174_1_reg_274);

assign shl_ln_fu_201_p3 = {{add_ln174_2_reg_279_pp0_iter71_reg}, {3'd0}};

assign start_out = real_start;

assign trunc_ln174_fu_153_p1 = i_reg_107[2:0];

assign trunc_ln46_1_fu_134_p1 = input_offset_constprop_i[2:0];

assign trunc_ln46_fu_130_p1 = input_r_dout[2:0];

assign zext_ln174_1_fu_208_p1 = shl_ln_fu_201_p3;

assign zext_ln174_fu_162_p1 = add_ln174_fu_157_p2;

assign zext_ln46_fu_126_p1 = input_offset_constprop_i;

always @ (posedge ap_clk) begin
    conv_i_i_i_reg_242[31:16] <= 16'b0000000000000000;
    zext_ln46_reg_250[32] <= 1'b0;
end

endmodule //krnl_LZW_read_input
