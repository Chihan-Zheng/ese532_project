-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_LZW_Block_split1_proc5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_length : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_aximm2_AWVALID : OUT STD_LOGIC;
    m_axi_aximm2_AWREADY : IN STD_LOGIC;
    m_axi_aximm2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_aximm2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_aximm2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_WVALID : OUT STD_LOGIC;
    m_axi_aximm2_WREADY : IN STD_LOGIC;
    m_axi_aximm2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_aximm2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_WLAST : OUT STD_LOGIC;
    m_axi_aximm2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_ARVALID : OUT STD_LOGIC;
    m_axi_aximm2_ARREADY : IN STD_LOGIC;
    m_axi_aximm2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_aximm2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_aximm2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_RVALID : IN STD_LOGIC;
    m_axi_aximm2_RREADY : OUT STD_LOGIC;
    m_axi_aximm2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_aximm2_RLAST : IN STD_LOGIC;
    m_axi_aximm2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_BVALID : IN STD_LOGIC;
    m_axi_aximm2_BREADY : OUT STD_LOGIC;
    m_axi_aximm2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_aximm2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    send_data : IN STD_LOGIC_VECTOR (63 downto 0);
    output_length : IN STD_LOGIC_VECTOR (63 downto 0);
    in_len_V_out_out_din : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_len_V_out_out_full_n : IN STD_LOGIC;
    in_len_V_out_out_write : OUT STD_LOGIC;
    in_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    in_out_full_n : IN STD_LOGIC;
    in_out_write : OUT STD_LOGIC;
    send_data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    send_data_out_full_n : IN STD_LOGIC;
    send_data_out_write : OUT STD_LOGIC;
    output_length_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_length_out_full_n : IN STD_LOGIC;
    output_length_out_write : OUT STD_LOGIC );
end;


architecture behav of krnl_LZW_Block_split1_proc5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal aximm2_blk_n_AR : STD_LOGIC;
    signal aximm2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal in_len_V_out_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal in_out_blk_n : STD_LOGIC;
    signal send_data_out_blk_n : STD_LOGIC;
    signal output_length_out_blk_n : STD_LOGIC;
    signal in_len_V_fu_143_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal in_len_V_reg_168 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln289_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state72 : BOOLEAN;
    signal trunc_ln_fu_122_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                in_len_V_reg_168 <= in_len_V_fu_143_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_aximm2_ARREADY, m_axi_aximm2_RVALID, in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (m_axi_aximm2_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_aximm2_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                if ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state72_assign_proc : process(in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n)
    begin
                ap_block_state72 <= ((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n, ap_CS_fsm_state72)
    begin
        if ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    aximm2_blk_n_AR_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, m_axi_aximm2_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            aximm2_blk_n_AR <= m_axi_aximm2_ARREADY;
        else 
            aximm2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    aximm2_blk_n_R_assign_proc : process(m_axi_aximm2_RVALID, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            aximm2_blk_n_R <= m_axi_aximm2_RVALID;
        else 
            aximm2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    in_len_V_fu_143_p1 <= m_axi_aximm2_RDATA(13 - 1 downto 0);

    in_len_V_out_out_blk_n_assign_proc : process(in_len_V_out_out_full_n, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            in_len_V_out_out_blk_n <= in_len_V_out_out_full_n;
        else 
            in_len_V_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_len_V_out_out_din <= in_len_V_reg_168;

    in_len_V_out_out_write_assign_proc : process(in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n, ap_CS_fsm_state72)
    begin
        if ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            in_len_V_out_out_write <= ap_const_logic_1;
        else 
            in_len_V_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    in_out_blk_n_assign_proc : process(in_out_full_n, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            in_out_blk_n <= in_out_full_n;
        else 
            in_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_out_din <= in_r;

    in_out_write_assign_proc : process(in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n, ap_CS_fsm_state72)
    begin
        if ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            in_out_write <= ap_const_logic_1;
        else 
            in_out_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n, ap_CS_fsm_state72)
    begin
        if ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_aximm2_ARADDR <= sext_ln289_fu_132_p1;
    m_axi_aximm2_ARBURST <= ap_const_lv2_0;
    m_axi_aximm2_ARCACHE <= ap_const_lv4_0;
    m_axi_aximm2_ARID <= ap_const_lv1_0;
    m_axi_aximm2_ARLEN <= ap_const_lv32_1;
    m_axi_aximm2_ARLOCK <= ap_const_lv2_0;
    m_axi_aximm2_ARPROT <= ap_const_lv3_0;
    m_axi_aximm2_ARQOS <= ap_const_lv4_0;
    m_axi_aximm2_ARREGION <= ap_const_lv4_0;
    m_axi_aximm2_ARSIZE <= ap_const_lv3_0;
    m_axi_aximm2_ARUSER <= ap_const_lv1_0;

    m_axi_aximm2_ARVALID_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, m_axi_aximm2_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (m_axi_aximm2_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_aximm2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_aximm2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_aximm2_AWADDR <= ap_const_lv64_0;
    m_axi_aximm2_AWBURST <= ap_const_lv2_0;
    m_axi_aximm2_AWCACHE <= ap_const_lv4_0;
    m_axi_aximm2_AWID <= ap_const_lv1_0;
    m_axi_aximm2_AWLEN <= ap_const_lv32_0;
    m_axi_aximm2_AWLOCK <= ap_const_lv2_0;
    m_axi_aximm2_AWPROT <= ap_const_lv3_0;
    m_axi_aximm2_AWQOS <= ap_const_lv4_0;
    m_axi_aximm2_AWREGION <= ap_const_lv4_0;
    m_axi_aximm2_AWSIZE <= ap_const_lv3_0;
    m_axi_aximm2_AWUSER <= ap_const_lv1_0;
    m_axi_aximm2_AWVALID <= ap_const_logic_0;
    m_axi_aximm2_BREADY <= ap_const_logic_0;

    m_axi_aximm2_RREADY_assign_proc : process(m_axi_aximm2_RVALID, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_aximm2_RVALID = ap_const_logic_1))) then 
            m_axi_aximm2_RREADY <= ap_const_logic_1;
        else 
            m_axi_aximm2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_aximm2_WDATA <= ap_const_lv16_0;
    m_axi_aximm2_WID <= ap_const_lv1_0;
    m_axi_aximm2_WLAST <= ap_const_logic_0;
    m_axi_aximm2_WSTRB <= ap_const_lv2_0;
    m_axi_aximm2_WUSER <= ap_const_lv1_0;
    m_axi_aximm2_WVALID <= ap_const_logic_0;

    output_length_out_blk_n_assign_proc : process(output_length_out_full_n, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            output_length_out_blk_n <= output_length_out_full_n;
        else 
            output_length_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_length_out_din <= output_length;

    output_length_out_write_assign_proc : process(in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n, ap_CS_fsm_state72)
    begin
        if ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            output_length_out_write <= ap_const_logic_1;
        else 
            output_length_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    send_data_out_blk_n_assign_proc : process(send_data_out_full_n, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            send_data_out_blk_n <= send_data_out_full_n;
        else 
            send_data_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    send_data_out_din <= send_data;

    send_data_out_write_assign_proc : process(in_len_V_out_out_full_n, in_out_full_n, send_data_out_full_n, output_length_out_full_n, ap_CS_fsm_state72)
    begin
        if ((not(((output_length_out_full_n = ap_const_logic_0) or (send_data_out_full_n = ap_const_logic_0) or (in_out_full_n = ap_const_logic_0) or (in_len_V_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            send_data_out_write <= ap_const_logic_1;
        else 
            send_data_out_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln289_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_122_p4),64));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_fu_122_p4 <= input_length(63 downto 1);
end behav;
